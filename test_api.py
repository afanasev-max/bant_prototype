#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API BANT —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "http://localhost:80/api"
AUTH = ("admin", "password")

def test_negative_responses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏...")
    
    # 1. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é...")
    response = requests.post(f"{API_BASE}/sessions/start", 
                           json={"deal_id": "API-TEST-001"}, 
                           auth=AUTH)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.status_code}")
        return
    
    session_data = response.json()
    session_id = session_data["session_id"]
    print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
    print(f"üìù –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {session_data['question']}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    test_cases = [
        ("–Ω–µ –∑–Ω–∞—é", "authority"),
        ("–Ω–µ—Ç", "budget"),
        ("–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å", "need"),
        ("unknown", "timing")
    ]
    
    for i, (answer, expected_slot) in enumerate(test_cases, 1):
        print(f"\n{i+1}Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç: '{answer}'")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response = requests.post(f"{API_BASE}/sessions/{session_id}/answer",
                               json={"text": answer},
                               auth=AUTH)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            continue
        
        data = response.json()
        print(f"   –°–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç: {data.get('current_slot', 'None')}")
        print(f"   –í–æ–ø—Ä–æ—Å: {data.get('question', 'None')[:100]}...")
        print(f"   Followup: {data.get('followups', [])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º record
        if 'record' in data:
            record = data['record']
            print(f"   Record: {json.dumps(record, ensure_ascii=False, indent=2)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥
            if 'score' in record:
                score = record['score']
                print(f"   –°–∫–æ—Ä: {score.get('total', 0)}/100")
                print(f"   –°—Ç–∞–¥–∏—è: {score.get('stage', 'unknown')}")
        
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def test_ui_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ UI"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ UI...")
    
    try:
        response = requests.get("http://localhost:80/", auth=AUTH)
        if response.status_code == 200:
            print("‚úÖ UI –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.text)} –±–∞–π—Ç")
        else:
            print(f"‚ùå UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ UI: {e}")

def test_health_check():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º health check"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...")
    
    try:
        response = requests.get("http://localhost:80/health", auth=AUTH)
        if response.status_code == 200:
            print("‚úÖ Health check –ø—Ä–æ—à–µ–ª")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        else:
            print(f"‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API BANT —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        test_health_check()
        test_ui_access()
        test_negative_responses()
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
