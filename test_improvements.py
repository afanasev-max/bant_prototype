#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π BANT —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.flow import BantFlow
from app.core.schema import SessionState, BantRecord, Budget, Authority, Need, Timing
from app.core.llm import GigaChatClient
import json

def test_negative_answers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ LLM
    class MockLLM:
        def chat(self, messages, json_mode=False):
            if json_mode:
                return json.dumps({
                    "budget": {"value": 3, "confidence": 0.6, "rationale": "–ë—é–¥–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É—Ç–æ—á–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å"},
                    "authority": {"value": 2, "confidence": 0.3, "rationale": "–õ–ü–† –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã—è—Å–Ω–∏—Ç—å –∫—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è"},
                    "need": {"value": 3, "confidence": 0.4, "rationale": "–ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–∑–Ω–∞—Ç—å —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞"},
                    "timing": {"value": 2, "confidence": 0.3, "rationale": "–°—Ä–æ–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞"},
                    "total": 10,
                    "stage": "unqualified"
                })
            return "{}"
    
    llm = MockLLM()
    flow = BantFlow(llm)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    session = SessionState(
        session_id="test-001",
        deal_id="DEAL-001",
        record=BantRecord(deal_id="DEAL-001")
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
    test_cases = [
        ("–Ω–µ –∑–Ω–∞—é", "authority"),
        ("–Ω–µ—Ç", "budget"), 
        ("–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å", "need"),
        ("unknown", "timing")
    ]
    
    for answer, expected_slot in test_cases:
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç: '{answer}' –¥–ª—è —Å–ª–æ—Ç–∞ {expected_slot}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        test_session = SessionState(
            session_id=f"test-{expected_slot}",
            deal_id="DEAL-001",
            record=BantRecord(deal_id="DEAL-001")
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        test_session, question, followups = flow.process_answer(test_session, answer)
        
        print(f"   –°–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç: {test_session.current_slot}")
        print(f"   –í–æ–ø—Ä–æ—Å: {question}")
        print(f"   Followup –≤–æ–ø—Ä–æ—Å—ã: {followups}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω
        if expected_slot == "budget":
            print(f"   Budget: have_budget = {test_session.record.budget.have_budget}")
            if test_session.record.budget.have_budget is False:
                print(f"   ‚úÖ Budget: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            else:
                print(f"   ‚ö†Ô∏è Budget: –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
        elif expected_slot == "authority":
            print(f"   Authority: decision_maker = {test_session.record.authority.decision_maker}")
            if test_session.record.authority.decision_maker == "–Ω–µ –∑–Ω–∞–µ–º":
                print(f"   ‚úÖ Authority: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            else:
                print(f"   ‚ö†Ô∏è Authority: –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
        elif expected_slot == "need":
            print(f"   Need: pain_points = {test_session.record.need.pain_points}")
            if test_session.record.need.pain_points == []:
                print(f"   ‚úÖ Need: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            else:
                print(f"   ‚ö†Ô∏è Need: –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
        elif expected_slot == "timing":
            print(f"   Timing: timeframe = {test_session.record.timing.timeframe}")
            if test_session.record.timing.timeframe == "unknown":
                print(f"   ‚úÖ Timing: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            else:
                print(f"   ‚ö†Ô∏è Timing: –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

def test_scoring():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–∏–Ω–≥"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–∏–Ω–≥...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ LLM
    class MockLLM:
        def chat(self, messages, json_mode=False):
            if json_mode:
                return json.dumps({
                    "budget": {"value": 3, "confidence": 0.6, "rationale": "–ë—é–¥–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É—Ç–æ—á–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å"},
                    "authority": {"value": 2, "confidence": 0.3, "rationale": "–õ–ü–† –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã—è—Å–Ω–∏—Ç—å –∫—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è"},
                    "need": {"value": 3, "confidence": 0.4, "rationale": "–ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–∑–Ω–∞—Ç—å —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞"},
                    "timing": {"value": 2, "confidence": 0.3, "rationale": "–°—Ä–æ–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞"},
                    "total": 10,
                    "stage": "unqualified"
                })
            return "{}"
    
    llm = MockLLM()
    flow = BantFlow(llm)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    record = BantRecord(
        deal_id="DEAL-001",
        budget=Budget(have_budget=False),
        authority=Authority(decision_maker="–Ω–µ –∑–Ω–∞–µ–º"),
        need=Need(pain_points=[]),
        timing=Timing(timeframe="unknown")
    )
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–∏–Ω–≥
    score = flow.calculate_score(record)
    
    print(f"   –û–±—â–∏–π —Å–∫–æ—Ä: {score.total}/100")
    print(f"   –°—Ç–∞–¥–∏—è: {score.stage}")
    print(f"   Budget: {score.budget.value}/25 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score.budget.confidence:.0%})")
    print(f"   Authority: {score.authority.value}/25 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score.authority.confidence:.0%})")
    print(f"   Need: {score.need.value}/30 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score.need.confidence:.0%})")
    print(f"   Timing: {score.timing.value}/20 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score.timing.confidence:.0%})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–æ—Ä—ã –Ω–∏–∑–∫–∏–µ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    assert score.total < 20, f"–û–∂–∏–¥–∞–ª—Å—è –Ω–∏–∑–∫–∏–π —Å–∫–æ—Ä, –ø–æ–ª—É—á–µ–Ω {score.total}"
    assert score.stage == "unqualified", f"–û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç–∞–¥–∏—è unqualified, –ø–æ–ª—É—á–µ–Ω–∞ {score.stage}"
    
    print("‚úÖ –°–∫–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

def test_ui_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º UI —Å—Ç–∞—Ç—É—Å—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º UI —Å—Ç–∞—Ç—É—Å—ã...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ UI
    from app.ui.streamlit_app import get_budget_status, get_authority_status, get_need_status, get_timing_status
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    budget_data = {"have_budget": False}
    status, message = get_budget_status(budget_data)
    print(f"   Budget (–Ω–µ—Ç): {status} - {message}")
    assert "‚ö†Ô∏è" in status, "–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å '–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è'"
    
    authority_data = {"decision_maker": "–Ω–µ –∑–Ω–∞–µ–º"}
    status, message = get_authority_status(authority_data)
    print(f"   Authority (–Ω–µ –∑–Ω–∞–µ–º): {status} - {message}")
    assert "‚ö†Ô∏è" in status, "–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å '–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è'"
    
    need_data = {"pain_points": []}
    status, message = get_need_status(need_data)
    print(f"   Need (–ø—É—Å—Ç–æ): {status} - {message}")
    assert "‚ö†Ô∏è" in status, "–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å '–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è'"
    
    timing_data = {"timeframe": "unknown"}
    status, message = get_timing_status(timing_data)
    print(f"   Timing (unknown): {status} - {message}")
    assert "‚ö†Ô∏è" in status, "–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å '–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è'"
    
    print("‚úÖ UI —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π BANT —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        test_negative_answers()
        test_scoring()
        test_ui_status()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("‚úÖ –õ–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –°–∫–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ follow-up –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ UI —Å—Ç–∞—Ç—É—Å—ã —É–ª—É—á—à–µ–Ω—ã")
        print("‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è stage 'unqualified' –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π confidence –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print("‚úÖ Rationale —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ —É–ª—É—á—à–µ–Ω")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()