# app/ui/streamlit_app.py
import streamlit as st
import requests
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = os.getenv("API_BASE", "http://localhost:8000")
print(f"DEBUG: API_BASE = {API_BASE}")
print(f"DEBUG: os.getenv('API_BASE') = {os.getenv('API_BASE')}")

st.set_page_config(
    page_title="BANT –û–ø—Ä–æ—Å",
    page_icon="üìä",
    layout="wide"
)

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if "session_id" not in st.session_state:
        st.session_state.session_id = None
    if "deal_id" not in st.session_state:
        st.session_state.deal_id = None
    if "current_question" not in st.session_state:
        st.session_state.current_question = ""
    if "history" not in st.session_state:
        st.session_state.history = []
    if "record" not in st.session_state:
        st.session_state.record = None
    if "filled" not in st.session_state:
        st.session_state.filled = "none"

def start_session(deal_id: str):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    try:
        st.write(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞: {API_BASE}/sessions/start")
        response = requests.post(f"{API_BASE}/sessions/start", json={"deal_id": deal_id})
        if response.status_code == 200:
            data = response.json()
            st.session_state.session_id = data["session_id"]
            st.session_state.deal_id = data["deal_id"]
            st.session_state.current_question = data.get("question", "")
            st.session_state.history = []
            st.session_state.record = None
            st.session_state.filled = "none"
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {response.text}")
            return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

def send_answer(text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"""
    try:
        response = requests.post(
            f"{API_BASE}/sessions/{st.session_state.session_id}/answer",
            json={"text": text}
        )
        if response.status_code == 200:
            data = response.json()
            st.session_state.current_question = data.get("next_question", "")
            st.session_state.record = data.get("record")
            st.session_state.filled = data.get("filled", "none")
            st.session_state.history.append(("user", text))
            if data.get("next_question"):
                st.session_state.history.append(("assistant", data["next_question"]))
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

def get_session_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏"""
    try:
        response = requests.get(f"{API_BASE}/sessions/{st.session_state.session_id}/status")
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def display_bant_status(record):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å BANT –ø–æ–ª–µ–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ '–ï—Å—Ç—å' / '–ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å'"""
    if not record:
        return
    
    st.subheader("üìä –°—Ç–∞—Ç—É—Å BANT")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üí∞ Budget (–ë—é–¥–∂–µ—Ç)**")
        budget = record.get("budget", {})
        budget_status, budget_message = get_budget_status(budget)
        st.write(f"–°—Ç–∞—Ç—É—Å: {budget_status}")
        if budget_message:
            st.write(budget_message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º confidence –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–∏–Ω–≥
        if record.get("score") and record["score"].get("budget"):
            confidence = record["score"]["budget"].get("confidence", 0)
            confidence_icon = "‚úÖ" if confidence > 0.75 else "üü°" if confidence > 0.5 else "‚ö†Ô∏è"
            confidence_text = "–≤—ã—Å–æ–∫–∞—è" if confidence > 0.75 else "—Å—Ä–µ–¥–Ω—è—è" if confidence > 0.5 else "–Ω–∏–∑–∫–∞—è"
            st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_icon} {confidence:.0%} ({confidence_text})")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ "–ï—Å—Ç—å" / "–ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å"
        display_budget_details(budget)
        
        st.markdown("**üë• Authority (–ü–æ–ª–Ω–æ–º–æ—á–∏—è)**")
        authority = record.get("authority", {})
        authority_status, authority_message = get_authority_status(authority)
        st.write(f"–°—Ç–∞—Ç—É—Å: {authority_status}")
        if authority_message:
            st.write(authority_message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º confidence –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–∏–Ω–≥
        if record.get("score") and record["score"].get("authority"):
            confidence = record["score"]["authority"].get("confidence", 0)
            confidence_icon = "‚úÖ" if confidence > 0.75 else "üü°" if confidence > 0.5 else "‚ö†Ô∏è"
            confidence_text = "–≤—ã—Å–æ–∫–∞—è" if confidence > 0.75 else "—Å—Ä–µ–¥–Ω—è—è" if confidence > 0.5 else "–Ω–∏–∑–∫–∞—è"
            st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_icon} {confidence:.0%} ({confidence_text})")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ "–ï—Å—Ç—å" / "–ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å"
        display_authority_details(authority)
    
    with col2:
        st.markdown("**üéØ Need (–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å)**")
        need = record.get("need", {})
        need_status, need_message = get_need_status(need)
        st.write(f"–°—Ç–∞—Ç—É—Å: {need_status}")
        if need_message:
            st.write(need_message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º confidence –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–∏–Ω–≥
        if record.get("score") and record["score"].get("need"):
            confidence = record["score"]["need"].get("confidence", 0)
            confidence_icon = "‚úÖ" if confidence > 0.75 else "üü°" if confidence > 0.5 else "‚ö†Ô∏è"
            confidence_text = "–≤—ã—Å–æ–∫–∞—è" if confidence > 0.75 else "—Å—Ä–µ–¥–Ω—è—è" if confidence > 0.5 else "–Ω–∏–∑–∫–∞—è"
            st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_icon} {confidence:.0%} ({confidence_text})")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ "–ï—Å—Ç—å" / "–ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å"
        display_need_details(need)
        
        st.markdown("**‚è∞ Timing (–°—Ä–æ–∫–∏)**")
        timing = record.get("timing", {})
        timing_status, timing_message = get_timing_status(timing)
        st.write(f"–°—Ç–∞—Ç—É—Å: {timing_status}")
        if timing_message:
            st.write(timing_message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º confidence –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–∏–Ω–≥
        if record.get("score") and record["score"].get("timing"):
            confidence = record["score"]["timing"].get("confidence", 0)
            confidence_icon = "‚úÖ" if confidence > 0.75 else "üü°" if confidence > 0.5 else "‚ö†Ô∏è"
            confidence_text = "–≤—ã—Å–æ–∫–∞—è" if confidence > 0.75 else "—Å—Ä–µ–¥–Ω—è—è" if confidence > 0.5 else "–Ω–∏–∑–∫–∞—è"
            st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_icon} {confidence:.0%} ({confidence_text})")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ "–ï—Å—Ç—å" / "–ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å"
        display_timing_details(timing)

def display_budget_details(budget):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –±—é–¥–∂–µ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º"""
    budget_status = budget.get("budget_status")
    
    if budget_status == "NOT_ASKED":
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        st.write("‚Ä¢ –ï—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç?")
        st.write("‚Ä¢ –í –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 200-500 —Ç—ã—Å)")
        st.write("‚Ä¢ –ö—Ç–æ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤?")
    elif budget_status == "NO_BUDGET":
        st.markdown("**‚úÖ –ß—Ç–æ –≤—ã—è—Å–Ω–∏–ª–∏:**")
        st.write("‚Ä¢ –ö–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–∏–ª –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±—é–¥–∂–µ—Ç–∞")
        
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        st.write("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
        st.write("‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
        st.write("‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
    elif budget_status == "AVAILABLE":
        st.markdown("**‚úÖ –ß—Ç–æ –≤—ã—è—Å–Ω–∏–ª–∏:**")
        if budget.get("amount_min") and budget.get("amount_max"):
            st.write(f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {budget.get('amount_min')} - {budget.get('amount_max')} {budget.get('currency', 'RUB')}")
        else:
            st.write("‚Ä¢ –ï—Å—Ç—å –±—é–¥–∂–µ—Ç, –Ω–æ —Å—É–º–º—ã –Ω–µ —É—Ç–æ—á–Ω–µ–Ω—ã")
        
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        if not budget.get("amount_min") or not budget.get("amount_max"):
            st.write("‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã –±—é–¥–∂–µ—Ç–∞")
        if not budget.get("comment"):
            st.write("‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
            st.write("‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏")
    else:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if budget.get("have_budget") is True:
            st.markdown("**‚úÖ –ß—Ç–æ –≤—ã—è—Å–Ω–∏–ª–∏:**")
            if budget.get("amount_min") and budget.get("amount_max"):
                st.write(f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {budget.get('amount_min')} - {budget.get('amount_max')} {budget.get('currency', 'RUB')}")
            else:
                st.write("‚Ä¢ –ï—Å—Ç—å –±—é–¥–∂–µ—Ç, –Ω–æ —Å—É–º–º—ã –Ω–µ —É—Ç–æ—á–Ω–µ–Ω—ã")
            
            st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
            if not budget.get("amount_min") or not budget.get("amount_max"):
                st.write("‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã –±—é–¥–∂–µ—Ç–∞")
            if not budget.get("comment"):
                st.write("‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
                st.write("‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏")
        elif budget.get("have_budget") is False:
            st.markdown("**‚úÖ –ß—Ç–æ –≤—ã—è—Å–Ω–∏–ª–∏:**")
            st.write("‚Ä¢ –ë—é–¥–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
            st.write("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
            st.write("‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
            st.write("‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è")

def display_authority_details(authority):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª–Ω–æ–º–æ—á–∏–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º"""
    decision_maker = authority.get("decision_maker")
    uncertain = authority.get("uncertain")
    
    if decision_maker and decision_maker not in ["–Ω–µ –∑–Ω–∞–µ–º", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å", "–Ω–µ –∑–Ω–∞—é", "–±–µ–∑ –ø–æ–Ω—è—Ç–∏—è", "–Ω–µ –≤ –∫—É—Ä—Å–µ"]:
        st.markdown("**‚úÖ –ß—Ç–æ –≤—ã—è—Å–Ω–∏–ª–∏:**")
        uncertainty_text = " (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ)" if uncertain else ""
        st.write(f"‚Ä¢ –õ–ü–†: {decision_maker}{uncertainty_text}")
        if authority.get("stakeholders"):
            st.write(f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(authority['stakeholders'])}")
        if authority.get("decision_process"):
            st.write(f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å: {authority['decision_process']}")
        
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        if uncertain:
            st.write("‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è")
        if len(decision_maker.split()) <= 1:
            st.write("‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –õ–ü–†")
        if not authority.get("stakeholders"):
            st.write("‚Ä¢ –ö—Ç–æ –µ—â–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π")
        if not authority.get("decision_process"):
            st.write("‚Ä¢ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è")
    else:
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        st.write("‚Ä¢ –ö—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        st.write("‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π")
        st.write("‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –õ–ü–† –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏")

def display_need_details(need):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º"""
    pain_points = need.get("pain_points", [])
    if pain_points and len(pain_points) > 0:
        st.markdown("**‚úÖ –ß—Ç–æ –≤—ã—è—Å–Ω–∏–ª–∏:**")
        for i, pain in enumerate(pain_points[:3], 1):
            st.write(f"‚Ä¢ {i}. {pain}")
        if len(pain_points) > 3:
            st.write(f"‚Ä¢ ... –∏ –µ—â–µ {len(pain_points) - 3} –ø—Ä–æ–±–ª–µ–º")
        
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        if not need.get("success_criteria"):
            st.write("‚Ä¢ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        if not need.get("current_solution"):
            st.write("‚Ä¢ –¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        if not need.get("priority"):
            st.write("‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        st.write("‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö")
        st.write("‚Ä¢ –ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ")
        st.write("‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞")

def display_timing_details(timing):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å—Ä–æ–∫–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º"""
    timeframe = timing.get("timeframe")
    if timeframe and timeframe != "unknown":
        st.markdown("**‚úÖ –ß—Ç–æ –≤—ã—è—Å–Ω–∏–ª–∏:**")
        if timeframe == "this_year":
            from datetime import datetime
            current_date = datetime.now()
            st.write(f"‚Ä¢ –°—Ä–æ–∫: –ö–æ–Ω–µ—Ü {current_date.year} –≥–æ–¥–∞")
        else:
            timeframe_map = {
                "this_month": "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
                "this_quarter": "–í —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ",
                "this_half": "–í —ç—Ç–æ–º –ø–æ–ª—É–≥–æ–¥–∏–∏",
                "next_year": "–í —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É"
            }
            st.write(f"‚Ä¢ –°—Ä–æ–∫: {timeframe_map.get(timeframe, timeframe)}")
        
        if timing.get("deadline"):
            st.write(f"‚Ä¢ –î–µ–¥–ª–∞–π–Ω: {timing['deadline']}")
        
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        if not timing.get("deadline"):
            st.write("‚Ä¢ –ñ–µ—Å—Ç–∫–æ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞")
        if not timing.get("next_step"):
            st.write("‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
        st.write("‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏")
        st.write("‚Ä¢ –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ —É—Å–ø–µ–µ–º")
    else:
        st.markdown("**‚ùì –ß—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:**")
        st.write("‚Ä¢ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–ø—É—Å–∫–∞")
        st.write("‚Ä¢ –ñ–µ—Å—Ç–∫–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫")
        st.write("‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞")

def get_budget_status(budget):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–∞ —Å —Ç—Ä–æ–π–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–µ–π"""
    budget_status = budget.get("budget_status")
    
    if budget_status == "NOT_ASKED":
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ–±—Å—É–¥–∏–ª –±—é–¥–∂–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º"
    elif budget_status == "NO_BUDGET":
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ö–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–∏–ª –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±—é–¥–∂–µ—Ç–∞"
    elif budget_status == "AVAILABLE":
        if budget.get("amount_min") and budget.get("amount_max") and budget.get("currency"):
            return "‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ç–∫–æ", f"–ï—Å—Ç—å –±—é–¥–∂–µ—Ç: {budget.get('amount_min', 'N/A')} - {budget.get('amount_max', 'N/A')} {budget.get('currency', 'RUB')}"
        elif budget.get("amount_min") or budget.get("amount_max"):
            return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–ï—Å—Ç—å –±—é–¥–∂–µ—Ç: {budget.get('amount_min', 'N/A')} - {budget.get('amount_max', 'N/A')} {budget.get('currency', 'RUB')} (–Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏)"
        else:
            return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", "–ï—Å—Ç—å –±—é–¥–∂–µ—Ç, –Ω–æ —Å—É–º–º—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    else:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if budget.get("have_budget") is None:
            return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—é–¥–∂–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        elif budget.get("have_budget") is True:
            if budget.get("amount_min") and budget.get("amount_max") and budget.get("currency"):
                return "‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ç–∫–æ", f"–ï—Å—Ç—å –±—é–¥–∂–µ—Ç: {budget.get('amount_min', 'N/A')} - {budget.get('amount_max', 'N/A')} {budget.get('currency', 'RUB')}"
            elif budget.get("amount_min") or budget.get("amount_max"):
                return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–ï—Å—Ç—å –±—é–¥–∂–µ—Ç: {budget.get('amount_min', 'N/A')} - {budget.get('amount_max', 'N/A')} {budget.get('currency', 'RUB')} (–Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏)"
            else:
                return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", "–ï—Å—Ç—å –±—é–¥–∂–µ—Ç, –Ω–æ —Å—É–º–º—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        else:
            return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ë—é–¥–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

def get_authority_status(authority):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª–Ω–æ–º–æ—á–∏–π —Å —Ç—Ä–æ–π–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–µ–π"""
    decision_maker = authority.get("decision_maker")
    stakeholders = authority.get("stakeholders", [])
    decision_process = authority.get("decision_process")
    uncertain = authority.get("uncertain")
    
    if decision_maker is None:
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–õ–ü–† –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    elif decision_maker in ["–Ω–µ –∑–Ω–∞–µ–º", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å", "–Ω–µ –∑–Ω–∞—é", "–±–µ–∑ –ø–æ–Ω—è—Ç–∏—è", "–Ω–µ –≤ –∫—É—Ä—Å–µ"]:
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", f"–õ–ü–†: {decision_maker}"
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        has_name = len(decision_maker.split()) > 1  # –ï—Å—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
        has_stakeholders = stakeholders and len(stakeholders) > 0
        has_process = decision_process and len(decision_process) > 10
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if has_name and has_stakeholders and has_process:
            status_icon = "‚úÖ" if not uncertain else "üü°"
            status_text = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ç–∫–æ" if not uncertain else "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ"
            uncertainty_text = " (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ)" if uncertain else ""
            return f"{status_icon} {status_text}", f"–õ–ü–†: {decision_maker}, –ø—Ä–æ—Ü–µ—Å—Å: {decision_process}{uncertainty_text}"
        elif has_name or (has_stakeholders and has_process):
            uncertainty_text = " (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ)" if uncertain else ""
            return f"üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–õ–ü–†: {decision_maker} (–Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞){uncertainty_text}"
        else:
            uncertainty_text = " (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ)" if uncertain else ""
            return f"üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–õ–ü–†: {decision_maker} (–Ω—É–∂–Ω—ã –∏–º—è –∏ –ø—Ä–æ—Ü–µ—Å—Å){uncertainty_text}"

def get_need_status(need):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Å —Ç—Ä–æ–π–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–µ–π"""
    pain_points = need.get("pain_points", [])
    success_criteria = need.get("success_criteria", [])
    current_solution = need.get("current_solution")
    priority = need.get("priority")
    
    if pain_points is None:
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ü—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã"
    elif len(pain_points) == 0:
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è)"
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        has_multiple_pains = len(pain_points) >= 2
        has_criteria = success_criteria and len(success_criteria) >= 2
        has_solution = current_solution and len(current_solution) > 10
        has_priority = priority in ['high', 'critical']
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if has_multiple_pains and has_criteria and has_solution and has_priority:
            return "‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ç–∫–æ", f"–ë–æ–ª–∏: {', '.join(pain_points[:2])}... (–¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–æ)"
        elif has_multiple_pains and has_criteria:
            return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–ë–æ–ª–∏: {', '.join(pain_points[:2])}... (–Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏ —Ä–µ—à–µ–Ω–∏—è)"
        elif has_multiple_pains:
            return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–ë–æ–ª–∏: {', '.join(pain_points)} (–Ω—É–∂–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞)"
        else:
            return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–ë–æ–ª–∏: {', '.join(pain_points)} (–Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏)"

def get_timing_status(timing):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ä–æ–∫–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∞—Ç—ã"""
    from datetime import datetime, date
    
    timeframe = timing.get("timeframe")
    deadline = timing.get("deadline")
    
    if timeframe is None:
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–°—Ä–æ–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
    elif timeframe == "unknown":
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", "–°—Ä–æ–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã"
    else:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ
        timeframe_map = {
            "this_month": "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
            "this_quarter": "–í —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ", 
            "this_half": "–í —ç—Ç–æ–º –ø–æ–ª—É–≥–æ–¥–∏–∏",
            "this_year": "–í —ç—Ç–æ–º –≥–æ–¥—É",
            "next_year": "–í —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É"
        }
        
        display_timeframe = timeframe_map.get(timeframe, timeframe)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è this_year
        if timeframe == "this_year":
            current_date = datetime.now()
            year_end = date(current_date.year, 12, 31)
            days_left = (year_end - current_date.date()).days
            months_left = max(0, days_left // 30)
            
            if months_left > 0:
                return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–°—Ä–æ–∫: –ö–æ–Ω–µ—Ü {current_date.year} –≥–æ–¥–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ~{months_left} –º–µ—Å)"
            else:
                return "‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ç–∫–æ", f"–°—Ä–æ–∫: –ö–æ–Ω–µ—Ü {current_date.year} –≥–æ–¥–∞ (—Å—Ä–æ—á–Ω–æ!)"
        elif timeframe in ["this_month", "this_quarter"]:
            return "‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ç–∫–æ", f"–°—Ä–æ–∫: {display_timeframe}"
        elif deadline:
            return "‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–µ—Ç–∫–æ", f"–î–µ–¥–ª–∞–π–Ω: {deadline}"
        else:
            return "üü° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ", f"–°—Ä–æ–∫: {display_timeframe} (–Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏)"

def display_scoring(score):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–∫–æ—Ä–∏–Ω–≥ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
    st.subheader("üìà –°–∫–æ—Ä–∏–Ω–≥ BANT")
    
    # –û–±—â–∏–π —Å–∫–æ—Ä
    total = score.get("total", 0)
    stage = score.get("stage", "unqualified")
    
    # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
    if total >= 80:
        color = "üü¢"
        stage_text = "–ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∂–µ"
    elif total >= 60:
        color = "üü°"
        stage_text = "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    else:
        color = "üî¥"
        stage_text = "–ù–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    
    st.markdown(f"**–û–±—â–∏–π —Å–∫–æ—Ä:** {color} {total}/100 - {stage_text}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ —Å–µ–∫—Ü–∏—è–º
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üí∞ Budget:** {}/25 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.0%})".format(
            score.get("budget", {}).get("value", 0),
            score.get("budget", {}).get("confidence", 0)
        ))
        if score.get("budget", {}).get("rationale"):
            st.caption(score["budget"]["rationale"])
        
        st.markdown("**üë• Authority:** {}/25 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.0%})".format(
            score.get("authority", {}).get("value", 0),
            score.get("authority", {}).get("confidence", 0)
        ))
        if score.get("authority", {}).get("rationale"):
            st.caption(score["authority"]["rationale"])
    
    with col2:
        st.markdown("**üéØ Need:** {}/30 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.0%})".format(
            score.get("need", {}).get("value", 0),
            score.get("need", {}).get("confidence", 0)
        ))
        if score.get("need", {}).get("rationale"):
            st.caption(score["need"]["rationale"])
        
        st.markdown("**‚è∞ Timing:** {}/20 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {:.0%})".format(
            score.get("timing", {}).get("value", 0),
            score.get("timing", {}).get("confidence", 0)
        ))
        if score.get("timing", {}).get("rationale"):
            st.caption(score["timing"]["rationale"])
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    low_confidence_slots = []
    for slot in ["budget", "authority", "need", "timing"]:
        confidence = score.get(slot, {}).get("confidence", 0)
        if confidence < 0.5:
            low_confidence_slots.append(slot)
    
    if low_confidence_slots:
        st.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö: {', '.join(low_confidence_slots)}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è unqualified —Å —É—á–µ—Ç–æ–º —Ç—Ä–æ–π–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–∏
    if stage == "unqualified":
        st.error("üö´ –õ–∏–¥ –Ω–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        budget_score = score.get("budget", {}).get("value", 0)
        authority_score = score.get("authority", {}).get("value", 0)
        need_score = score.get("need", {}).get("value", 0)
        timing_score = score.get("timing", {}).get("value", 0)
        
        st.markdown("**–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:**")
        
        # Budget –∞–Ω–∞–ª–∏–∑
        if budget_score < 8:
            st.markdown("‚Ä¢ üí∞ **–ë—é–¥–∂–µ—Ç**: ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫–µ—Ä - –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö")
        elif budget_score < 15:
            st.markdown("‚Ä¢ üí∞ **–ë—é–¥–∂–µ—Ç**: üü° –ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏")
        else:
            st.markdown("‚Ä¢ üí∞ **–ë—é–¥–∂–µ—Ç**: ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ç–∫–æ")
            
        # Authority –∞–Ω–∞–ª–∏–∑
        if authority_score < 8:
            st.markdown("‚Ä¢ üë• **–õ–ü–†**: ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫–µ—Ä - –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        elif authority_score < 15:
            st.markdown("‚Ä¢ üë• **–õ–ü–†**: üü° –ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏")
        else:
            st.markdown("‚Ä¢ üë• **–õ–ü–†**: ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ç–∫–æ")
            
        # Need –∞–Ω–∞–ª–∏–∑
        if need_score < 8:
            st.markdown("‚Ä¢ üéØ **–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å**: ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫–µ—Ä - –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã –±–æ–ª–∏")
        elif need_score < 15:
            st.markdown("‚Ä¢ üéØ **–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å**: üü° –ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ - –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏")
        else:
            st.markdown("‚Ä¢ üéØ **–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å**: ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —á–µ—Ç–∫–æ")
            
        # Timing –∞–Ω–∞–ª–∏–∑
        if timing_score < 8:
            st.markdown("‚Ä¢ ‚è∞ **–°—Ä–æ–∫–∏**: ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫–µ—Ä - –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
        elif timing_score < 15:
            st.markdown("‚Ä¢ ‚è∞ **–°—Ä–æ–∫–∏**: üü° –ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã - –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏")
        else:
            st.markdown("‚Ä¢ ‚è∞ **–°—Ä–æ–∫–∏**: ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —á–µ—Ç–∫–æ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        st.markdown("**–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**")
        
        if budget_score < 8:
            st.markdown("1. **–ù–∞–∑–Ω–∞—á—å—Ç–µ –≤—Å—Ç—Ä–µ—á—É** –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
            st.markdown("2. **–°–ø—Ä–æ—Å–∏—Ç–µ**: '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?'")
            st.markdown("3. **–í—ã—è—Å–Ω–∏—Ç–µ**: '–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç–µ –ª–∏ –≤—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏?'")
        
        if authority_score < 15:
            st.markdown("1. **–£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã** –õ–ü–† (–∏–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Ç–µ–ª–µ—Ñ–æ–Ω)")
            st.markdown("2. **–í—ã—è—Å–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å**: –∫—Ç–æ –µ—â–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π?")
            st.markdown("3. **–°–ø—Ä–æ—Å–∏—Ç–µ**: '–ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –õ–ü–†?'")
        
        if need_score < 15:
            st.markdown("1. **–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é** –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –±–æ–ª–µ–π")
            st.markdown("2. **–°–ø—Ä–æ—Å–∏—Ç–µ**: '–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö?'")
            st.markdown("3. **–í—ã—è—Å–Ω–∏—Ç–µ**: '–ö–∞–∫ –±—É–¥–µ—Ç–µ –∏–∑–º–µ—Ä—è—Ç—å —É—Å–ø–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞?'")
        
        if timing_score < 15:
            st.markdown("1. **–£—Ç–æ—á–Ω–∏—Ç–µ –∂–µ—Å—Ç–∫–æ—Å—Ç—å** –¥–µ–¥–ª–∞–π–Ω–∞")
            st.markdown("2. **–í—ã—è—Å–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã** —Å—Ä–æ—á–Ω–æ—Å—Ç–∏")
            st.markdown("3. **–°–ø—Ä–æ—Å–∏—Ç–µ**: '–ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ —É—Å–ø–µ–µ–º –∫ —ç—Ç–æ–º—É —Å—Ä–æ–∫—É?'")

def main():
    init_session_state()
    
    st.title("üìä BANT –û–ø—Ä–æ—Å (–ü—Ä–æ—Ç–æ—Ç–∏–ø)")
    st.markdown("---")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.info(f"üîç API_BASE: {API_BASE}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if not st.session_state.session_id:
        st.subheader("üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
        deal_id = st.text_input("ID —Å–¥–µ–ª–∫–∏", value="DEAL-001", help="–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏")
        
        if st.button("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", type="primary"):
            if start_session(deal_id):
                st.success("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å.")
                st.rerun()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    else:
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.subheader(f"üíº –°–¥–µ–ª–∫–∞: {st.session_state.deal_id}")
            st.write(f"**–°–µ—Å—Å–∏—è:** {st.session_state.session_id}")
        
        with col2:
            if st.button("üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", type="secondary"):
                st.session_state.session_id = None
                st.session_state.deal_id = None
                st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if st.session_state.current_question:
            st.info(f"**–í–æ–ø—Ä–æ—Å:** {st.session_state.current_question}")
        
        # –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        with st.form("answer_form"):
            answer_text = st.text_area(
                "–í–∞—à –æ—Ç–≤–µ—Ç:",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å...",
                height=100
            )
            submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", type="primary")
            
            if submitted and answer_text.strip():
                if send_answer(answer_text.strip()):
                    st.success("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                    st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if st.session_state.history:
            st.subheader("üí¨ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞")
            for role, message in st.session_state.history[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if role == "user":
                    st.write(f"**–í—ã:** {message}")
                else:
                    st.write(f"**–°–∏—Å—Ç–µ–º–∞:** {message}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ BANT
        if st.session_state.record:
            display_bant_status(st.session_state.record)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞
            if st.session_state.record.get("score"):
                display_scoring(st.session_state.record["score"])
            
            # JSON –ø—Ä–µ–≤—å—é
            st.subheader("üìÑ JSON –¥–∞–Ω–Ω—ã–µ")
            st.json(st.session_state.record)
            
            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            json_str = json.dumps(st.session_state.record, ensure_ascii=False, indent=2)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                data=json_str,
                file_name=f"bant_{st.session_state.deal_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        if st.session_state.filled:
            status_colors = {
                "full": "üü¢",
                "partial": "üü°", 
                "none": "üî¥"
            }
            status_text = {
                "full": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–æ",
                "partial": "–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ",
                "none": "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
            }
            
            st.markdown(f"**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** {status_colors.get(st.session_state.filled, '‚ö™')} {status_text.get(st.session_state.filled, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

if __name__ == "__main__":
    main()
