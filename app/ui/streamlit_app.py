# app/ui/streamlit_app.py
import streamlit as st
import requests
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = os.getenv("API_BASE", "http://localhost:8000")
print(f"DEBUG: API_BASE = {API_BASE}")
print(f"DEBUG: os.getenv('API_BASE') = {os.getenv('API_BASE')}")

st.set_page_config(
    page_title="BANT –û–ø—Ä–æ—Å",
    page_icon="üìä",
    layout="wide"
)

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if "session_id" not in st.session_state:
        st.session_state.session_id = None
    if "deal_id" not in st.session_state:
        st.session_state.deal_id = None
    if "current_question" not in st.session_state:
        st.session_state.current_question = ""
    if "history" not in st.session_state:
        st.session_state.history = []
    if "record" not in st.session_state:
        st.session_state.record = None
    if "filled" not in st.session_state:
        st.session_state.filled = "none"

def start_session(deal_id: str):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    try:
        st.write(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞: {API_BASE}/sessions/start")
        response = requests.post(f"{API_BASE}/sessions/start", json={"deal_id": deal_id})
        if response.status_code == 200:
            data = response.json()
            st.session_state.session_id = data["session_id"]
            st.session_state.deal_id = data["deal_id"]
            st.session_state.current_question = data.get("question", "")
            st.session_state.history = []
            st.session_state.record = None
            st.session_state.filled = "none"
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {response.text}")
            return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

def send_answer(text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"""
    try:
        response = requests.post(
            f"{API_BASE}/sessions/{st.session_state.session_id}/answer",
            json={"text": text}
        )
        if response.status_code == 200:
            data = response.json()
            st.session_state.current_question = data.get("next_question", "")
            st.session_state.record = data.get("record")
            st.session_state.filled = data.get("filled", "none")
            st.session_state.history.append(("user", text))
            if data.get("next_question"):
                st.session_state.history.append(("assistant", data["next_question"]))
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

def get_session_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏"""
    try:
        response = requests.get(f"{API_BASE}/sessions/{st.session_state.session_id}/status")
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def display_bant_status(record):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å BANT –ø–æ–ª–µ–π"""
    if not record:
        return
    
    st.subheader("üìä –°—Ç–∞—Ç—É—Å BANT")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üí∞ Budget (–ë—é–¥–∂–µ—Ç)**")
        budget = record.get("budget", {})
        budget_filled = any(v is not None and v != "" for v in budget.values())
        st.write(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' if budget_filled else '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}")
        if budget_filled:
            if budget.get("have_budget"):
                st.write(f"–ï—Å—Ç—å –±—é–¥–∂–µ—Ç: {budget.get('amount_min', 'N/A')} - {budget.get('amount_max', 'N/A')} {budget.get('currency', 'RUB')}")
            else:
                st.write("–ë—é–¥–∂–µ—Ç: –ù–µ—Ç")
        
        st.markdown("**üë• Authority (–ü–æ–ª–Ω–æ–º–æ—á–∏—è)**")
        authority = record.get("authority", {})
        authority_filled = any(v is not None and v != "" for v in authority.values())
        st.write(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' if authority_filled else '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}")
        if authority_filled and authority.get("decision_maker"):
            st.write(f"–õ–ü–†: {authority.get('decision_maker')}")
    
    with col2:
        st.markdown("**üéØ Need (–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å)**")
        need = record.get("need", {})
        need_filled = any(v is not None and v != "" for v in need.values())
        st.write(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' if need_filled else '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}")
        if need_filled and need.get("pain_points"):
            st.write(f"–ë–æ–ª–∏: {', '.join(need.get('pain_points', []))}")
        
        st.markdown("**‚è∞ Timing (–°—Ä–æ–∫–∏)**")
        timing = record.get("timing", {})
        timing_filled = any(v is not None and v != "" for v in timing.values())
        st.write(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ' if timing_filled else '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}")
        if timing_filled and timing.get("timeframe"):
            st.write(f"–°—Ä–æ–∫: {timing.get('timeframe')}")

def main():
    init_session_state()
    
    st.title("üìä BANT –û–ø—Ä–æ—Å (–ü—Ä–æ—Ç–æ—Ç–∏–ø)")
    st.markdown("---")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.info(f"üîç API_BASE: {API_BASE}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if not st.session_state.session_id:
        st.subheader("üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
        deal_id = st.text_input("ID —Å–¥–µ–ª–∫–∏", value="DEAL-001", help="–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏")
        
        if st.button("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", type="primary"):
            if start_session(deal_id):
                st.success("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å.")
                st.rerun()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    else:
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.subheader(f"üíº –°–¥–µ–ª–∫–∞: {st.session_state.deal_id}")
            st.write(f"**–°–µ—Å—Å–∏—è:** {st.session_state.session_id}")
        
        with col2:
            if st.button("üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", type="secondary"):
                st.session_state.session_id = None
                st.session_state.deal_id = None
                st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if st.session_state.current_question:
            st.info(f"**–í–æ–ø—Ä–æ—Å:** {st.session_state.current_question}")
        
        # –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        with st.form("answer_form"):
            answer_text = st.text_area(
                "–í–∞—à –æ—Ç–≤–µ—Ç:",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å...",
                height=100
            )
            submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", type="primary")
            
            if submitted and answer_text.strip():
                if send_answer(answer_text.strip()):
                    st.success("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                    st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if st.session_state.history:
            st.subheader("üí¨ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞")
            for role, message in st.session_state.history[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if role == "user":
                    st.write(f"**–í—ã:** {message}")
                else:
                    st.write(f"**–°–∏—Å—Ç–µ–º–∞:** {message}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ BANT
        if st.session_state.record:
            display_bant_status(st.session_state.record)
            
            # JSON –ø—Ä–µ–≤—å—é
            st.subheader("üìÑ JSON –¥–∞–Ω–Ω—ã–µ")
            st.json(st.session_state.record)
            
            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            json_str = json.dumps(st.session_state.record, ensure_ascii=False, indent=2)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                data=json_str,
                file_name=f"bant_{st.session_state.deal_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        if st.session_state.filled:
            status_colors = {
                "full": "üü¢",
                "partial": "üü°", 
                "none": "üî¥"
            }
            status_text = {
                "full": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–æ",
                "partial": "–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ",
                "none": "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
            }
            
            st.markdown(f"**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** {status_colors.get(st.session_state.filled, '‚ö™')} {status_text.get(st.session_state.filled, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

if __name__ == "__main__":
    main()
