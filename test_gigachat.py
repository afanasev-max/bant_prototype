#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã GigaChat
"""
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.llm import GigaChatClient

def test_gigachat():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = GigaChatClient()
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç GigaChat —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞."},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
        ]
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        response = client.chat(messages, temperature=0.2)
        print(f"üì• –û—Ç–≤–µ—Ç –æ—Ç GigaChat: {response}")
        
        print("‚úÖ GigaChat —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GigaChat: {e}")
        return False

def test_json_mode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º json_mode"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º json_mode...")
    
    try:
        client = GigaChatClient()
        
        messages = [
            {"role": "system", "content": "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª–µ–º 'status' –∏ 'message'."},
            {"role": "user", "content": "–°–∫–∞–∂–∏ —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ"}
        ]
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å json_mode=True...")
        response = client.chat(messages, json_mode=True)
        print(f"üì• JSON –æ—Ç–≤–µ—Ç: {response}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
        import json
        parsed = json.loads(response)
        print(f"‚úÖ JSON –ø–∞—Ä—Å–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {parsed}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ json_mode: {e}")
        return False

def test_bant_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ BANT –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ BANT –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.core.validator import parse_bant_with_llm
        
        client = GigaChatClient()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        answer = "–£ –Ω–∞—Å –µ—Å—Ç—å –±—é–¥–∂–µ—Ç 500000 —Ä—É–±–ª–µ–π –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç. –ü–æ–∫—É–ø–∞—Ç—å –±—É–¥–µ–º –≤ —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ."
        
        print(f"üì§ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {answer}")
        result = parse_bant_with_llm(client, answer)
        print(f"üì• –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ BANT: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GigaChat\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    auth_key = os.getenv("GIGACHAT_AUTH_KEY")
    if not auth_key:
        print("‚ùå GIGACHAT_AUTH_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    print(f"üîë AUTH_KEY –Ω–∞–π–¥–µ–Ω: {auth_key[:20]}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = True
    success &= test_gigachat()
    success &= test_json_mode()
    success &= test_bant_parsing()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! GigaChat –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        sys.exit(1)
